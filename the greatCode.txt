// main.cpp
#include "Game.h"

int main() {
    Game game;
    game.run();
    return 0;
}
// interfaces/Graphics.h
#ifndef GRAPHICS_H
#define GRAPHICS_H

#include "SimulationInterface.h"
#include "Grid.h"
#include "Button.h"
#include <SFML/Graphics.hpp>
#include <string>

/**
 * @brief Interface graphique pour la simulation utilisant SFML.
 *
 * Cette classe gère l'affichage de la grille, les boutons interactifs,
 * et les interactions utilisateur via une fenêtre graphique.
 */
class GraphicsInterface : public SimulationInterface {
public:
    /**
     * @brief Exécute la simulation en mode graphique.
     *
     * @param grid Référence vers la grille de simulation.
     * @param delay Délai entre chaque itération en millisecondes.
     * @param maxIterations Nombre maximal d'itérations (0 pour infini).
     */
    void run(Grid& grid, int delay, int maxIterations) override;
};

#endif // GRAPHICS_H
// interfaces/Console.cpp
#include "Console.h"
#include <iostream>
#include <thread>
#include <chrono>

using namespace std;

void ConsoleInterface::run(Grid& grid, int delay, int maxIterations) {
    int iterationsCount = 0;
    while (maxIterations == 0 || iterationsCount < maxIterations) {
        grid.print();
        grid.update();
        iterationsCount++;

        // Vérifier si l'automate est stable
        if (grid.hasStableState()) {
            cout << "La grille a atteint un état stable. Fin de la simulation." << endl;
            break;
        }

        std::this_thread::sleep_for(std::chrono::milliseconds(delay));
    }

    cout << "Simulation terminée après " << iterationsCount << " itérations." << endl;
}
// interfaces/Console.h
#ifndef CONSOLE_H
#define CONSOLE_H

#include "SimulationInterface.h"
#include <string>

/**
 * @brief Interface console pour la simulation.
 *
 * Cette classe gère l'affichage et la mise à jour de la grille dans la console.
 */
class ConsoleInterface : public SimulationInterface {
public:
    /**
     * @brief Exécute la simulation en mode console.
     *
     * @param grid Référence vers la grille de simulation.
     * @param delay Délai entre chaque itération en millisecondes.
     * @param maxIterations Nombre maximal d'itérations (0 pour infini).
     */
    void run(Grid& grid, int delay, int maxIterations) override;
};

#endif // CONSOLE_H
// services/Game.cpp
#include "Game.h"
#include "Console.h"
#include "Graphics.h"
#include <iostream>
#include <string>
#include <memory>

using namespace std;

void Game::run() {
    int rows = 25;
    int cols = 25;
    int cellSize = 19;
    int maxIterations = 0;
    int delay = 500; // Temps d'attente en millisecondes pour ralentir les itérations
    string mode;
    string filename;

    cout << "Choisissez le mode (console insérez C et pour le mode graphique insérez G) : ";
    cin >> mode;

    if (mode != "C" && mode != "G") {
        cout << "Mode invalide, veuillez redémarrer et choisir 'C' ou 'G'." << endl;
        return;
    }

    cout << "Entrez le délai entre chaque itération en millisecondes (par défaut 500 ms) : ";
    cin >> delay;

    Grid grid(rows, cols);

    // Utilisation de std::unique_ptr pour la gestion de la mémoire
    unique_ptr<SimulationInterface> interface;

    if (mode == "G") {
        cout << "Entrez le nombre d'itérations (0 pour une simulation infinie) : ";
        cin >> maxIterations;

        interface = make_unique<GraphicsInterface>();
    }
    else if (mode == "C") {
        cout << "Entrez le nom du fichier pour initialiser la grille (ou appuyez sur Entrée pour créer une grille vide) : ";
        cin.ignore(); // Pour ignorer le caractère de nouvelle ligne restant dans le buffer
        getline(cin, filename);

        try {
            if (!filename.empty()) {
                grid.initializeFromInput(filename);
            }
        }
        catch (const runtime_error& e) {
            cout << "Erreur : " << e.what() << endl;
            return;
        }

        interface = make_unique<ConsoleInterface>();
    }

    if (interface) {
        interface->run(grid, delay, maxIterations);
    }
}
// components/Grid.cpp
#include "Grid.h"
#include <iostream>
#include <fstream>
#include <stdexcept>
#include <thread>
#include <chrono>

using namespace std;

Grid::Grid(int r, int c) : rows(r), cols(c) {
    cells.resize(rows, vector<CellState>(cols, VIDE));
}

void Grid::initializeFromInput(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        throw runtime_error("Impossible d'ouvrir le fichier.");
    }
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            string token;
            file >> token;
            if (token == "1") {
                cells[i][j] = VIVANT;
            }
            else if (token == "X" || token == "x") {
                cells[i][j] = OBSTACLE;
            }
            else {
                cells[i][j] = VIDE;
            }
        }
    }
    file.close();
}

int Grid::countLivingNeighbors(int x, int y) {
    int livingNeighbors = 0;
    for (int i = -1; i <= 1; ++i) {
        for (int j = -1; j <= 1; ++j) {
            if (i == 0 && j == 0) continue;
            int newX = (x + i + rows) % rows;
            int newY = (y + j + cols) % cols;

            if (cells[newX][newY] == VIVANT) {
                livingNeighbors++;
            }
        }
    }
    return livingNeighbors;
}

void Grid::saveState() {
    history.push(cells); // Sauvegarder l'état actuel dans la pile
}

void Grid::update() {
    saveState(); // Sauvegarder l'état avant la mise à jour
    vector<vector<CellState>> newCells = cells;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (cells[i][j] == OBSTACLE) continue;

            int livingNeighbors = countLivingNeighbors(i, j);
            if (cells[i][j] == VIVANT) {
                if (livingNeighbors < 2 || livingNeighbors > 3) {
                    newCells[i][j] = VIDE;
                }
            }
            else {
                if (livingNeighbors == 3) {
                    newCells[i][j] = VIVANT;
                }
            }
        }
    }
    cells = newCells;
}

void Grid::undo() {
    if (!history.empty()) {
        cells = history.top(); // Restaurer l'état précédent
        history.pop();         // Retirer cet état de la pile
    }
}

bool Grid::hasStableState() const {
    if (history.empty()) return false;
    return cells == history.top(); // Comparer avec l'état précédent
}

void Grid::draw(sf::RenderWindow& window, int cellSize) const {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            sf::RectangleShape cell(sf::Vector2f(cellSize, cellSize));
            cell.setPosition(j * cellSize, i * cellSize);

            if (cells[i][j] == VIVANT) {
                cell.setFillColor(sf::Color::White);
            }
            else if (cells[i][j] == OBSTACLE) {
                cell.setFillColor(sf::Color::Red);
            }
            else {
                cell.setFillColor(sf::Color::Black);
            }

            window.draw(cell);
        }
    }
}

void Grid::toggleCell(int mouseX, int mouseY, int cellSize, CellState state) {
    int col = mouseX / cellSize;
    int row = mouseY / cellSize;
    if (row >= 0 && row < rows && col >= 0 && col < cols) {
        if (state == OBSTACLE) {
            cells[row][col] = OBSTACLE;
        }
        else if (cells[row][col] != OBSTACLE) {
            cells[row][col] = state;
        }
    }
}

void Grid::print() const {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (cells[i][j] == VIVANT)
                cout << "1 ";
            else if (cells[i][j] == OBSTACLE)
                cout << "X ";
            else
                cout << "0 ";
        }
        cout << endl;
    }
    cout << "-----------------------" << endl;
}
#ifndef CELLULE_H
#define CELLULE_H

enum CellState {
    VIDE,      // Cellule vide
    VIVANT,    // Cellule vivante
    OBSTACLE,  
    MORT// Cellule obstacle
};

#endif // CELLULE_H
// interfaces/Button.cpp
#include "Button.h"

Button::Button(float x, float y, float width, float height, sf::Font& font, const std::string& label, const sf::Color& color) {
    // Configuration du rectangle
    shape.setSize(sf::Vector2f(width, height));
    shape.setFillColor(color);
    shape.setPosition(x, y);

    // Configuration du texte
    text.setFont(font);
    text.setString(label);
    text.setCharacterSize(static_cast<int>(height * 0.6)); // Taille relative à la hauteur du bouton
    text.setFillColor(sf::Color::Black); // Couleur du texte
    text.setStyle(sf::Text::Bold); // Texte en gras

    // Centrer le texte dans le rectangle
    sf::FloatRect textBounds = text.getLocalBounds();
    text.setOrigin(textBounds.left + textBounds.width / 2, textBounds.top + textBounds.height / 2);
    text.setPosition(x + width / 2, y + height / 2);
}

void Button::setColor(const sf::Color& color) {
    shape.setFillColor(color);
}

void Button::draw(sf::RenderWindow& window) {
    window.draw(shape);
    window.draw(text);
}

bool Button::isClicked(float mouseX, float mouseY) {
    return shape.getGlobalBounds().contains(mouseX, mouseY);
}

// interfaces/SimulationInterface.h
#ifndef SIMULATIONINTERFACE_H
#define SIMULATIONINTERFACE_H

#include "Grid.h"

/**
 * @brief Classe de base abstraite pour les interfaces de simulation.
 *
 * Cette classe définit une interface commune pour différentes implémentations
 * de l'interface utilisateur de la simulation (console, graphique, etc.).
 */
class SimulationInterface {
public:
    virtual ~SimulationInterface() = default;

    /**
     * @brief Exécute la simulation.
     *
     * @param grid Référence vers la grille de simulation.
     * @param delay Délai entre chaque itération en millisecondes.
     * @param maxIterations Nombre maximal d'itérations (0 pour infini).
     */
    virtual void run(Grid& grid, int delay, int maxIterations) = 0;
};

#endif // SIMULATIONINTERFACE_H
// interfaces/Button.h
#ifndef BUTTON_H
#define BUTTON_H

#include <SFML/Graphics.hpp>
#include <string>

/**
 * @brief Classe représentant un bouton interactif.
 *
 * Cette classe gère l'affichage, le changement de couleur, et la détection des clics sur un bouton.
 */
class Button {
private:
    sf::RectangleShape shape;
    sf::Text text;

public:
    /**
     * @brief Constructeur du bouton.
     *
     * @param x Position X du bouton.
     * @param y Position Y du bouton.
     * @param width Largeur du bouton.
     * @param height Hauteur du bouton.
     * @param font Référence à la police utilisée pour le texte.
     * @param label Texte affiché sur le bouton.
     * @param color Couleur de remplissage du bouton.
     */
    Button(float x, float y, float width, float height, sf::Font& font, const std::string& label, const sf::Color& color);

    /**
     * @brief Change la couleur du bouton.
     *
     * @param color Nouvelle couleur de remplissage.
     */
    void setColor(const sf::Color& color);

    /**
     * @brief Dessine le bouton dans la fenêtre.
     *
     * @param window Référence à la fenêtre SFML.
     */
    void draw(sf::RenderWindow& window);

    /**
     * @brief Vérifie si le bouton a été cliqué.
     *
     * @param mouseX Position X de la souris.
     * @param mouseY Position Y de la souris.
     * @return true Si le bouton a été cliqué.
     * @return false Sinon.
     */
    bool isClicked(float mouseX, float mouseY);
};

#endif // BUTTON_H
// components/Grid.h
#ifndef GRID_H
#define GRID_H

#include "Cellule.h"
#include <vector>
#include <stack>
#include <string>
#include <SFML/Graphics.hpp>

/**
 * @brief Classe représentant la grille de simulation.
 *
 * Cette classe gère l'état de chaque cellule, les mises à jour de la grille,
 * les opérations d'annulation, et le dessin de la grille dans l'interface graphique.
 */
class Grid {
private:
    std::vector<std::vector<CellState>> cells;
    std::stack<std::vector<std::vector<CellState>>> history; // Pile pour stocker les états précédents
    int rows;
    int cols;

    /**
     * @brief Compte le nombre de voisins vivants autour d'une cellule.
     *
     * @param x Position X de la cellule.
     * @param y Position Y de la cellule.
     * @return int Nombre de voisins vivants.
     */
    int countLivingNeighbors(int x, int y);

    /**
     * @brief Sauvegarde l'état actuel de la grille dans l'historique.
     */
    void saveState();

public:
    /**
     * @brief Constructeur de la grille.
     *
     * @param r Nombre de lignes.
     * @param c Nombre de colonnes.
     */
    Grid(int r, int c);

    /**
     * @brief Initialise la grille à partir d'un fichier.
     *
     * @param filename Nom du fichier contenant la configuration initiale.
     */
    void initializeFromInput(const std::string& filename);

    /**
     * @brief Met à jour la grille selon les règles de la simulation.
     */
    void update();

    /**
     * @brief Annule la dernière mise à jour de la grille.
     */
    void undo();

    /**
     * @brief Vérifie si la grille a atteint un état stable.
     *
     * @return true Si la grille est stable.
     * @return false Sinon.
     */
    bool hasStableState() const;

    /**
     * @brief Dessine la grille dans une fenêtre SFML.
     *
     * @param window Référence à la fenêtre SFML.
     * @param cellSize Taille de chaque cellule en pixels.
     */
    void draw(sf::RenderWindow& window, int cellSize) const;

    /**
     * @brief Bascule l'état d'une cellule en fonction des coordonnées de la souris.
     *
     * @param mouseX Position X de la souris.
     * @param mouseY Position Y de la souris.
     * @param cellSize Taille de chaque cellule en pixels.
     * @param state Nouvel état à attribuer à la cellule.
     */
    void toggleCell(int mouseX, int mouseY, int cellSize, CellState state);

    /**
     * @brief Affiche la grille dans la console.
     */
    void print() const;

    // Getters
    int getRows() const { return rows; }
    int getCols() const { return cols; }
};

#endif // GRID_H
// interfaces/Graphics.cpp
#include "Graphics.h"
#include <iostream>
#include <thread>
#include <chrono>

void GraphicsInterface::run(Grid& grid, int delay, int maxIterations) {
    int rows = grid.getRows();
    int cols = grid.getCols();
    int cellSize = 19; // Taille des cellules (doit correspondre à celle utilisée dans Grid)

    sf::RenderWindow window(sf::VideoMode(cols * cellSize, rows * cellSize + 100), "Jeu de la Vie");

    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) {
        std::cerr << "Erreur lors du chargement de la police" << std::endl;
        return;
    }

    Button startButton(10, rows * cellSize + 10, 150, 40, font, "Démarrer", sf::Color::Green);
    Button stopButton(170, rows * cellSize + 10, 150, 40, font, "Arrêter", sf::Color::Red);
    Button undoButton(330, rows * cellSize + 10, 150, 40, font, "Annuler", sf::Color::Blue);

    bool simulationRunning = false;
    CellState currentState = VIVANT; // Commencer avec l'état 'VIVANT'
    int iterationsCount = 0;

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }

            if (event.type == sf::Event::MouseButtonPressed) {
                if (event.mouseButton.button == sf::Mouse::Left) {
                    if (startButton.isClicked(event.mouseButton.x, event.mouseButton.y)) {
                        simulationRunning = true;   // Démarrer la simulation
                        startButton.setColor(sf::Color::Red);
                        stopButton.setColor(sf::Color::Green);
                    }
                    if (stopButton.isClicked(event.mouseButton.x, event.mouseButton.y)) {
                        simulationRunning = false;  // Arrêter la simulation
                        startButton.setColor(sf::Color::Green);
                        stopButton.setColor(sf::Color::Red);
                    }
                    if (undoButton.isClicked(event.mouseButton.x, event.mouseButton.y)) {
                        simulationRunning = false;  // Arrêter la simulation
                        startButton.setColor(sf::Color::Green);  // Réinitialiser l'état des boutons
                        stopButton.setColor(sf::Color::Red);
                        grid.undo();  // Restaurer l'état précédent de la grille
                    }
                    grid.toggleCell(event.mouseButton.x, event.mouseButton.y, cellSize, currentState); // Basculer l'état de la cellule
                }
                else if (event.mouseButton.button == sf::Mouse::Right) {
                    grid.toggleCell(event.mouseButton.x, event.mouseButton.y, cellSize, OBSTACLE); // Ajouter un obstacle
                }
            }

            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::V) {
                    currentState = VIVANT;
                }
                else if (event.key.code == sf::Keyboard::D) {
                    currentState = VIDE;
                }
                else if (event.key.code == sf::Keyboard::O) {
                    currentState = OBSTACLE;
                }
            }
        }

        if (simulationRunning) {
            grid.update();
            iterationsCount++;

            // Vérification si la simulation doit être arrêtée
            if (maxIterations > 0 && iterationsCount >= maxIterations) {
                // Arrêter la simulation après le nombre d'itérations maximum
                simulationRunning = false;
                startButton.setColor(sf::Color::Green);
                stopButton.setColor(sf::Color::Red);
            }
            else if (grid.hasStableState()) {
                // Arrêter la simulation si la grille est stable
                simulationRunning = false;
                startButton.setColor(sf::Color::Green);
                stopButton.setColor(sf::Color::Red);
                std::cout << "La grille a atteint un état stable. Fin de la simulation." << std::endl;
            }
        }

        window.clear();
        grid.draw(window, cellSize);
        startButton.draw(window);
        stopButton.draw(window);
        undoButton.draw(window);

        // Affichage du nombre d'itérations effectuées
        sf::Text iterationsText;
        iterationsText.setFont(font);
        iterationsText.setCharacterSize(18);
        iterationsText.setFillColor(sf::Color::Black);
        iterationsText.setPosition(10, rows * cellSize + 50);
        iterationsText.setString("Iterations: " + std::to_string(iterationsCount));
        window.draw(iterationsText);

        window.display();
        std::this_thread::sleep_for(std::chrono::milliseconds(delay));
    }
}
// services/Game.h
#ifndef GAME_H
#define GAME_H

#include "Grid.h"
#include "SimulationInterface.h"
#include <memory> // Pour std::unique_ptr

/**
 * @brief Classe principale contrôlant le flux de l'application.
 *
 * Cette classe gère la sélection du mode d'interface (console ou graphique),
 * l'initialisation de la grille, et l'exécution de la simulation via
 * l'interface sélectionnée.
 */
class Game {
public:
    /**
     * @brief Exécute le jeu.
     */
    void run();
};

#endif // GAME_H
1 0 0 1 1 1 0 1 1 1 
0 1 0 1 1 0 1 0 0 0 
1 0 1 0 0 0 1 0 0 1 
0 1 1 1 1 0 0 0 1 0 
1 0 0 1 0 1 1 1 0 0 
1 1 1 0 0 0 1 0 1 1 
0 0 1 1 0 1 0 1 0 1 
0 1 1 0 0 0 0 1 0 1 
1 0 1 1 0 1 1 1 1 0 
0 1 1 1 0 0 0 1 1 0 
